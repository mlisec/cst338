//Defines the Card object
public class Card {
	//Defines a variable of type Suit
    public enum Suit{
    	CLUBS, DIAMONDS, HEARTS, SPADES
    }
    //Used to hold the card value
	private char value;
	//Used to hold the card suit
    private Suit suit;
    //Used to verify a legal entry
    private boolean errorFlag;
    
    //constructor to allow arguments to be passed into the object
    public Card(char value, Suit suit){
        this.value = value;
        this.suit = suit;
        errorFlag = set(value, suit);
    }
    
    //a default constructor
    public Card(){
        value = 'A';
        suit = Suit.SPADES;
    }
    
    //enables the card to be printed
    public String toString(){
    	//checks if it is valid before printing
    	if(errorFlag == true){
    		String invalid = "invalid";
    		return invalid;
    	}
    	else{
    		String str1 = (value + " " + suit);
    		return str1;
    	}
    }
    
    //checks if the entry is a valid entry
    public boolean set(char value, Suit suit){
    	if((Character.getNumericValue(value) < 2 || Character.getNumericValue(value) > 9) 
    			&& (value != 'T' && value != 'J'
                && value != 'Q' && value != 'K' && value != 'A')
                || (suit != Suit.CLUBS && suit != Suit.DIAMONDS
                && suit != Suit.HEARTS && suit != Suit. SPADES)){
            errorFlag = true;
            return errorFlag;
        }
        else{
        	errorFlag = false;
        	return errorFlag;
        }
    }
    
    //gets value of the card
    public char getValue(){
    	return value;
    }
    
    //gets the suit of the card
    public Suit getSuit(){
    	return suit;
    }
    
    //gets the validity of the card
    public boolean getFlag(){
    	return errorFlag;
    }
    
    //checks if 2 cards are equal
    public boolean equals(Card card){
    	//checks to see if the card is itself
    	if(card == this){
    		return true;
    	}
    	
    	//makes sure that the card is a Card object
    	if(!(card instanceof Card)){
    		return false;
    	}
    	
    	//superimposes the card value to be used for comparison
    	Card x = (Card) card;
    	
    	//comparison functions to see if 2 cards are equal
    	return value == x.value && suit == x.suit;
    		
    	}
    

}

///////////////////////////////////////////////////////////

/* card output

A of SPADES
invalid
K of HEARTS


3 of CLUBS
invalid
K of HEARTS

*/

///////////////////////////////////////////////////////////

import java.util.Arrays;

//Holds card values in an array
public class Hand {
    
	//needed to set hand size
    public static final int MAX_CARDS = 50;
    
    //private variables for hand and how many cards
    private Card[] myCards = new Card[MAX_CARDS];
    private int numCards = 0;
    
    //sets each card in hand array to null and card count to 0
    public void resetHand(){
        for(int i = 0; i > MAX_CARDS; i++){
            myCards[i] = null;
        }
        numCards = 0;
    }
    
    //takes a card and puts in in the next spot in the array
    public boolean takeCard(Card card){
        if(numCards < MAX_CARDS){

            Card x = new Card();
            x = card;
            myCards[numCards] = x;
            numCards++;
            return true;
        }
        else{
            System.out.println("Hand is full.");
            return false;
        }
    	
    }
    
    //takes the top most card in the array and displays it
    public Card playCard(){
        Card play = myCards[numCards - 1];
        myCards[numCards - 1] = null;
        numCards--;
        System.out.println("Playing " + play);
        if(myCards[0] == null){
            resetHand();
        }
        return play;
    }
    
    //String to see what is in hand or if your hand is empty
    public String toString() {

        // build new array
        Card[] temp = new Card[numCards];

        for (int i = 0; i < numCards; i++) {
            if (myCards[i] != null) {
                temp[i] = myCards[i];
            }
        }

        return Arrays.toString(temp).replace("[", "(").replace("]", ")");
    }
    
    //accessor to get the number of cards in hand
    public int getNumCards(){
            return numCards;
        }
    
    
    //accessor to see if a card in hand is valid
    public Card inspectCard(int k){
        Card current = myCards[k];
        if (k > numCards) {
            return new Card('P', Card.Suit.CLUBS);
        }
        if(current.getFlag() == true){
            System.out.println("Card is invalid.");
            return current;
    	}
        else{
            System.out.println(current);
            return current;
        }
    }

}

///////////////////////////////////////////////////////////

/*hand output

Card is invalid.
Hand is full.
(A of SPADES, 3 of DIAMONDS, K of HEARTS, A of SPADES, 3 of DIAMONDS, K of HEARTS, A of SPADES, 3 of DIAMONDS, K of HEARTS, A of SPADES, 3 of DIAMONDS, K of HEARTS, A of SPADES, 3 of DIAMONDS, K of HEARTS, A of SPADES, 3 of DIAMONDS, K of HEARTS, A of SPADES, 3 of DIAMONDS, K of HEARTS, A of SPADES, 3 of DIAMONDS, K of HEARTS, A of SPADES, 3 of DIAMONDS, K of HEARTS, A of SPADES, 3 of DIAMONDS, K of HEARTS, A of SPADES, 3 of DIAMONDS, K of HEARTS, A of SPADES, 3 of DIAMONDS, K of HEARTS, A of SPADES, 3 of DIAMONDS, K of HEARTS, A of SPADES, 3 of DIAMONDS, K of HEARTS, A of SPADES, 3 of DIAMONDS, K of HEARTS, A of SPADES, 3 of DIAMONDS, K of HEARTS, A of SPADES, 3 of DIAMONDS)
3 of DIAMONDS
Playing 3 of DIAMONDS
Playing A of SPADES
Playing K of HEARTS
Playing 3 of DIAMONDS
Playing A of SPADES
Playing K of HEARTS
Playing 3 of DIAMONDS
Playing A of SPADES
Playing K of HEARTS
Playing 3 of DIAMONDS
Playing A of SPADES
Playing K of HEARTS
Playing 3 of DIAMONDS
Playing A of SPADES
Playing K of HEARTS
Playing 3 of DIAMONDS
Playing A of SPADES
Playing K of HEARTS
Playing 3 of DIAMONDS
Playing A of SPADES
Playing K of HEARTS
Playing 3 of DIAMONDS
Playing A of SPADES
Playing K of HEARTS
Playing 3 of DIAMONDS
Playing A of SPADES
Playing K of HEARTS
Playing 3 of DIAMONDS
Playing A of SPADES
Playing K of HEARTS
Playing 3 of DIAMONDS
Playing A of SPADES
Playing K of HEARTS
Playing 3 of DIAMONDS
Playing A of SPADES
Playing K of HEARTS
Playing 3 of DIAMONDS
Playing A of SPADES
Playing K of HEARTS
Playing 3 of DIAMONDS
Playing A of SPADES
Playing K of HEARTS
Playing 3 of DIAMONDS
Playing A of SPADES
Playing K of HEARTS
Playing 3 of DIAMONDS
Playing A of SPADES
Playing K of HEARTS
Playing 3 of DIAMONDS
Playing A of SPADES
()

*/

///////////////////////////////////////////////////////////

import java.lang.Math;

class Deck {

   public final int MAX_CARDS = 260;

   private static Card[] masterPack;

   private Card[] cards;
   private int topCard;
   private int numPacks;

   // default constructor
   public Deck() {

      allocateMasterPack();
      cards = masterPack;
      numPacks = 1;
      topCard = 52;

   }

   public Deck(int numPacks) {
      // Only allow if numbers of cards not exceed max cards
      if (MAX_CARDS > 52 * numPacks) {
         // Initialize Master Pack
         allocateMasterPack();
         // Initialize cards array size of 52 * numpacks
         cards = new Card[52 * numPacks];
         topCard = 0;
         
         // Loop to add card into cards array
         for (int k = 0; k < numPacks; k++) {
            for (int i = 0; i < masterPack.length; i++) {
               cards[topCard] = masterPack[i];
               topCard++;
            }
         }

         this.numPacks = numPacks;
      }
   }

   public void init(int numPacks) {

      // Only allow if numbers of cards not exceed max cards
      if (MAX_CARDS > 52 * numPacks) {
         // Initialize Master Pack
         allocateMasterPack();
         
         // Initialize cards array size of 52 * numpacks
         cards = new Card[52 * numPacks];
         topCard = 0;
         
         // Loop to add card into cards array
         for (int k = 0; k < numPacks; k++) {
            for (int i = 0; i < masterPack.length; i++) {
               cards[topCard] = masterPack[i];
               topCard++;
            }
         }

         this.numPacks = numPacks;
      }

   }

   public void shuffle() {
      // Loop cards array to shuffle card
      for(int i = 0; i < cards.length; i++) {
         // Generate a random number from 0 to cards length
         int random = (int)(Math.random() * cards.length);

         // Swap the random position with the current index element
         Card temp = cards[i];
         cards[i] = cards[random];
         cards[random] = temp;
      }
   }

   public Card dealCard() {

      // Get top position of card deck
      Card card = cards[topCard - 1];

      // Remove card from deck
      cards[topCard - 1] = null;

      // Reduce number of card on deck
      topCard--;

      // Return card
      return card;

   }

   public int getTopCard() {
      return topCard;
   }

   public Card inspectCard(int k) {
      
      // If k is invalid return Invalid card
      if (k >= topCard) {
         return new Card('P', Card.Suit.CLUBS);
      }

      // Return card
      return cards[k];

   }

   private static void allocateMasterPack() {
      // Create master deck only when it never created
      if (masterPack == null) {
         masterPack = new Card[]{
            new Card('A', Card.Suit.CLUBS),
            new Card('A', Card.Suit.HEARTS),
            new Card('A', Card.Suit.SPADES),
            new Card('A', Card.Suit.DIAMONDS),
            new Card('2', Card.Suit.CLUBS),
            new Card('2', Card.Suit.HEARTS),
            new Card('2', Card.Suit.SPADES),
            new Card('2', Card.Suit.DIAMONDS),
            new Card('3', Card.Suit.CLUBS),
            new Card('3', Card.Suit.HEARTS),
            new Card('3', Card.Suit.SPADES),
            new Card('3', Card.Suit.DIAMONDS),
            new Card('4', Card.Suit.CLUBS),
            new Card('4', Card.Suit.HEARTS),
            new Card('4', Card.Suit.SPADES),
            new Card('4', Card.Suit.DIAMONDS),
            new Card('5', Card.Suit.CLUBS),
            new Card('5', Card.Suit.HEARTS),
            new Card('5', Card.Suit.SPADES),
            new Card('5', Card.Suit.DIAMONDS),
            new Card('6', Card.Suit.CLUBS),
            new Card('6', Card.Suit.HEARTS),
            new Card('6', Card.Suit.SPADES),
            new Card('6', Card.Suit.DIAMONDS),
            new Card('7', Card.Suit.CLUBS),
            new Card('7', Card.Suit.HEARTS),
            new Card('7', Card.Suit.SPADES),
            new Card('7', Card.Suit.DIAMONDS),
            new Card('8', Card.Suit.CLUBS),
            new Card('8', Card.Suit.HEARTS),
            new Card('8', Card.Suit.SPADES),
            new Card('8', Card.Suit.DIAMONDS),
            new Card('9', Card.Suit.CLUBS),
            new Card('9', Card.Suit.HEARTS),
            new Card('9', Card.Suit.SPADES),
            new Card('9', Card.Suit.DIAMONDS),
            new Card('T', Card.Suit.CLUBS),
            new Card('T', Card.Suit.HEARTS),
            new Card('T', Card.Suit.SPADES),
            new Card('T', Card.Suit.DIAMONDS),
            new Card('J', Card.Suit.CLUBS),
            new Card('J', Card.Suit.HEARTS),
            new Card('J', Card.Suit.SPADES),
            new Card('J', Card.Suit.DIAMONDS),
            new Card('Q', Card.Suit.CLUBS),
            new Card('Q', Card.Suit.HEARTS),
            new Card('Q', Card.Suit.SPADES),
            new Card('Q', Card.Suit.DIAMONDS),
            new Card('K', Card.Suit.CLUBS),
            new Card('K', Card.Suit.HEARTS),
            new Card('K', Card.Suit.SPADES),
            new Card('K', Card.Suit.DIAMONDS),
         };
      }
   }
}

///////////////////////////////////////////////////////////

/*deck output

A CLUBS / A HEARTS / A SPADES / A DIAMONDS / 2 CLUBS / 2 HEARTS / 2 SPADES /
 2 DIAMONDS / 3 CLUBS / 3 HEARTS / 3 SPADES / 3 DIAMONDS / 4 CLUBS / 4 HEARTS
 /  4 SPADES / 4 DIAMONDS / 5 CLUBS / 5 HEARTS / 5 SPADES / 5 DIAMONDS / 6
 CLUBS  / 6 HEARTS / 6 SPADES / 6 DIAMONDS / 7 CLUBS / 7 HEARTS / 7 SPADES /
 7  DIAMONDS / 8 CLUBS / 8 HEARTS / 8 SPADES / 8 DIAMONDS / 9 CLUBS / 9
 HEARTS /  9 SPADES / 9 DIAMONDS / T CLUBS / T HEARTS / T SPADES / T DIAMONDS
 /  J CLUBS / J HEARTS / J SPADES / J DIAMONDS / Q CLUBS / Q HEARTS / Q
 SPADES  / Q DIAMONDS / K CLUBS / K HEARTS / K SPADES / K DIAMONDS / A CLUBS
 /  A HEARTS / A SPADES / A DIAMONDS / 2 CLUBS / 2 HEARTS / 2 SPADES / 2
 DIAMONDS /  3 CLUBS / 3 HEARTS / 3 SPADES / 3 DIAMONDS / 4 CLUBS / 4 HEARTS
 /  4 SPADES / 4 DIAMONDS / 5 CLUBS / 5 HEARTS / 5 SPADES / 5 DIAMONDS / 6
 CLUBS  / 6 HEARTS / 6 SPADES / 6 DIAMONDS / 7 CLUBS / 7 HEARTS / 7 SPADES  /
 7 DIAMONDS / 8 CLUBS / 8 HEARTS / 8 SPADES / 8 DIAMONDS / 9 CLUBS / 9 HEARTS
 / 9 SPADES / 9 DIAMONDS / T CLUBS / T HEARTS / T SPADES / T DIAMONDS / J
 CLUBS  / J HEARTS / J SPADES / J DIAMONDS / Q CLUBS / Q HEARTS / Q SPADES  /
 Q DIAMONDS / K CLUBS / K HEARTS / K SPADES / K DIAMONDS


 J DIAMONDS / 5 HEARTS / 8 HEARTS / A HEARTS / 5 DIAMONDS / 8 HEARTS / 6 CLUBS
 / K DIAMONDS / K HEARTS / A DIAMONDS / 5 CLUBS / 4 DIAMONDS / 2 CLUBS / 2 SPADES
 / Q DIAMONDS / 9 SPADES / 9 SPADES / 4 HEARTS / A HEARTS / 7 CLUBS / 3 SPADES
 / 7 HEARTS / K HEARTS / 4 CLUBS / Q HEARTS / 5 DIAMONDS / A CLUBS / 2 HEARTS
 / 2 HEARTS / 8 SPADES / Q DIAMONDS / 9 DIAMONDS / A CLUBS / T DIAMONDS / 5 SPA
 DES / T DIAMONDS / 4 SPADES / 4 DIAMONDS / J SPADES / 7 SPADES / Q SPADES / 9
 CLUBS / 8 DIAMONDS / A SPADES / J CLUBS / 2 SPADES / 3 CLUBS / T CLUBS / 5 SPAD
 ES / K SPADES / K SPADES / 6 CLUBS / J DIAMONDS / 3 DIAMONDS / T HEARTS / T CLU
 BS / Q CLUBS / 4 SPADES / 7 DIAMONDS / 3 HEARTS / 6 HEARTS / 4 HEARTS / 6 SPADE
 S / 6 SPADES / 6 DIAMONDS / T SPADES / J HEARTS / 8 DIAMONDS / 6 HEARTS / 5 HE
 ARTS / 2 DIAMONDS / K DIAMONDS / Q CLUBS / A SPADES / K CLUBS / T SPADES / 9 H
 EARTS / A DIAMONDS / 7 DIAMONDS / 6 DIAMONDS / 8 SPADES / 9 HEARTS / J CLUBS /
 7 SPADES / 2 CLUBS / 3 HEARTS / 4 CLUBS / 9 DIAMONDS / 7 CLUBS / 3 DIAMONDS /
 9 CLUBS / 3 CLUBS / 7 HEARTS / Q HEARTS / T HEARTS / 2 DIAMONDS / Q SPADES / J
 SPADES / 8 CLUBS / K CLUBS / 8 CLUBS / 5 CLUBS / J HEARTS / 3 SPADES


 A CLUBS / A HEARTS / A SPADES / A DIAMONDS / 2 CLUBS / 2 HEARTS / 2 SPADES / 2
 DIAMONDS / 3 CLUBS / 3 HEARTS / 3 SPADES / 3 DIAMONDS / 4 CLUBS / 4 HEARTS / 4
 SPADES / 4 DIAMONDS / 5 CLUBS / 5 HEARTS / 5 SPADES / 5 DIAMONDS / 6 CLUBS / 6
 HEARTS / 6 SPADES / 6 DIAMONDS / 7 CLUBS / 7 HEARTS / 7 SPADES / 7 DIAMONDS /
 8 CLUBS / 8 HEARTS / 8 SPADES / 8 DIAMONDS / 9 CLUBS / 9 HEARTS / 9 SPADES / 9
 DIAMONDS / T CLUBS / T HEARTS / T SPADES / T DIAMONDS / J CLUBS / J HEARTS / J
 SPADES / J DIAMONDS / Q CLUBS / Q HEARTS / Q SPADES / Q DIAMONDS / K CLUBS / K
 HEARTS / K SPADES / K DIAMONDS

 9 CLUBS / Q SPADES / 3 DIAMONDS / T CLUBS / Q DIAMONDS / 7 HEARTS / J SPADES /
 7 DIAMONDS / J HEARTS / 2 CLUBS / 5 DIAMONDS / 5 CLUBS / 9 SPADES / J DIAMONDS
 / Q HEARTS / Q CLUBS / 4 HEARTS / A DIAMONDS / T DIAMONDS / 8 DIAMONDS / 7 CLU
 BS / 2 SPADES / A SPADES / 9 DIAMONDS / 4 CLUBS / 3 CLUBS / 6 SPADES / J CLUBS
 / K SPADES / K HEARTS / 3 HEARTS / A HEARTS / 4 DIAMONDS / 5 SPADES / 8 HEARTS
 / T SPADES / 7 SPADES / 2 DIAMONDS / 8 CLUBS / T HEARTS / K CLUBS / 6 DIAMONDS
 / 8 SPADES / 6 HEARTS / 9 HEARTS / 3 SPADES / A CLUBS / K DIAMONDS / 2 HEARTS
 / 4 SPADES / 6 CLUBS / 5 HEARTS

*/

///////////////////////////////////////////////////////////

import java.util.Scanner;

public class Assignment3 {

   public static void main(String [] args) {
      // init scanner
      Scanner reader = new Scanner(System.in);

      int userHand;

      do {
         // Display question
         System.out.print("How many hands? (1 - 10, please): ");

         // If user input not type of int
         while (!reader.hasNextInt()) {
            System.out.println("Not a valid answer.");
            reader.next();
         }
         // read user input
         userHand = reader.nextInt();

      } while (userHand < 1 || userHand > 10);

      // Init empty array of hand
      Hand[] allHands = new Hand[userHand];

      // Get user hand
      for (int i = 0; i < userHand; i++) {
         allHands[i] = new Hand();
      }

      // Init deck with 1 pack
      Deck myDecks = new Deck(1);

      // While decks still have card keep dealing
      while(myDecks.getTopCard() > 0) {
         for (int i = 0; i < userHand; i++) {
            // If deck is empty stop deal card
            if (myDecks.getTopCard() == 0) {
               break;
            }
            // Take card into user hand
            allHands[i].takeCard(myDecks.dealCard());
         }
      }


      // Display user hand with unshuffled deck
      System.out.println("Here are our hands, from unshuffled deck:");
      for (int i = 0; i < allHands.length; i++) {
         System.out.print("Hand = ");
         System.out.println(allHands[i] + "\n");
      }


      // Reset deck and shuffle
      myDecks.init(1);
      myDecks.shuffle();

      // Reset all hands
      for (int i = 0; i < userHand; i++) {
         allHands[i].resetHand();
      }

      // While decks still have card keep dealing
      while(myDecks.getTopCard() > 0) {
         for (int i = 0; i < userHand; i++) {
            // If deck is empty stop deal card
            if (myDecks.getTopCard() == 0) {
               break;
            }
            // Take card into user hand
            allHands[i].takeCard(myDecks.dealCard());
         }
      }

      // Display user hand with shuffled deck
      System.out.println("Here are our hands, from SHUFFLED deck:");
      for (int i = 0; i < allHands.length; i++) {
         System.out.print("Hand = ");
         System.out.println(allHands[i] + "\n");
      }

   }
}

///////////////////////////////////////////////////////////

/*main output

How many hands? (1 - 10, please): 5
 Here are our hands, from unshuffled deck:
 Hand = (K DIAMONDS, Q SPADES, J HEARTS, T CLUBS, 8 DIAMONDS, 7 SPADES, 6
 HEARTS, 5 CLUBS, 3 DIAMONDS, 2 SPADES, A HEARTS)

 Hand = (K SPADES, Q HEARTS, J CLUBS, 9 DIAMONDS, 8 SPADES, 7 HEARTS, 6 
 CLUBS, 4 DIAMONDS, 3 SPADES, 2 HEARTS, A CLUBS)

 Hand = (K HEARTS, Q CLUBS, T DIAMONDS, 9 SPADES, 8 HEARTS, 7 CLUBS, 5
 DIAMONDS, 4 SPADES, 3 HEARTS, 2 CLUBS)

 Hand = (K CLUBS, J DIAMONDS, T SPADES, 9 HEARTS, 8 CLUBS, 6 DIAMONDS, 5
 SPADES, 4 HEARTS, 3 CLUBS, A DIAMONDS)

 Hand = (Q DIAMONDS, J SPADES, T HEARTS, 9 CLUBS, 7 DIAMONDS, 6 SPADES, 5
 HEARTS, 4 CLUBS, 2 DIAMONDS, A SPADES)

 Here are our hands, from SHUFFLED deck:
 Hand = (A CLUBS, 6 HEARTS, 9 DIAMONDS, 6 DIAMONDS, A HEARTS, 4 CLUBS, 6
 SPADES, 9 CLUBS, T SPADES, 3 CLUBS, 8 HEARTS)

 Hand = (A DIAMONDS, 7 CLUBS, 9 HEARTS, 4 DIAMONDS, J DIAMONDS, K SPADES, 9
 SPADES, 5 CLUBS, 3 HEARTS, J HEARTS, 4 SPADES)

 Hand = (Q CLUBS, 3 SPADES, 7 HEARTS, 7 DIAMONDS, K HEARTS, 2 CLUBS, 8 SPADES,
 2 SPADES, 4 HEARTS, Q DIAMONDS)

 Hand = (T DIAMONDS, Q SPADES, 8 DIAMONDS, J SPADES, K CLUBS, 5 DIAMONDS, 2
 DIAMONDS, 6 CLUBS, 3 DIAMONDS, 7 SPADES)

 Hand = (K DIAMONDS, 2 HEARTS, 8 CLUBS, T HEARTS, T CLUBS, A SPADES, J CLUBS,
 5 SPADES, 5 HEARTS, Q HEARTS)
 
*/